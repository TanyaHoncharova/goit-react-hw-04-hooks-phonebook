{"version":3,"sources":["Components/Filter/Filter.module.css","Components/ContactForm/ContactForm.module.css","Components/Title/Title.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","Components/ContactList/ContactList.module.css"],"names":["module","exports","Title","children","ContactForm","coincidence","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","generate","phoneInputId","handleInputChange","e","currentTarget","value","className","styles","form","event","preventDefault","toLowerCase","label","htmlFor","type","pattern","title","input","id","onChange","required","btn","ContactList","contacts","onDeleteContact","style","list","map","item","onClick","defaultProps","Filter","inputListId","propsTypes","string","isPequired","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","visibleContacts","normalizedFilter","includes","getVisibleContact","contact","console","log","prev","currentName","find","alert","contactId","totalContactsCount","visibleContactsCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7e12052.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__nV4V7\",\"btn\":\"Filter_btn__17aGv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1lLJr\",\"label\":\"ContactForm_label__ELVDh\",\"input\":\"ContactForm_input__1h44E\",\"btn\":\"ContactForm_btn__gn64n\"};","function Title({ children }) {\r\n  return (\r\n    <>\r\n      <h1>{children}</h1>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport styles from './ContactForm.module.css';\r\n\r\nconst ContactForm = ({coincidence, onSubmit }) => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    \r\nconst nameInputId = shortid.generate();\r\nconst phoneInputId = shortid.generate();\r\n    \r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (coincidence(name.toLowerCase())) return;\r\n        \r\n        onSubmit(name, number);\r\n\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    return (\r\n        <form\r\n            className={styles.form} onSubmit={handleSubmit} >\r\n            <>\r\n            <label className={styles.label} htmlFor={nameInputId}>\r\n                Name:\r\n            </label>    \r\n                <input type=\"text\" name=\"name\" pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\" title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    className={styles.input}\r\n                    id={nameInputId}\r\n                    value={name}\r\n                    onChange={handleInputChange}\r\n                    required />\r\n           \r\n                <label className={styles.label} htmlFor={phoneInputId} >\r\n                    Number:\r\n                </label>    \r\n                <input type=\"tel\" name=\"number\" id={phoneInputId}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    className={styles.input} value={number} onChange={handleInputChange} required />\r\n           \r\n            <button  type=\"submit\"\r\n                className={styles.btn} >\r\n                Add contact\r\n                </button>\r\n            </>    \r\n        </form>\r\n    )\r\n};\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.shape(PropTypes.string.isRequired)),\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport style from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\nreturn   (\n    <ul className={style.list}>\n      { contacts &&  contacts.map(({id, name, number}) => {\n        return (\n          <li key={id} className={style.item}>\n            <span>{name}</span><span>{number}</span>\n            <button\n              className={style.btn}\n              type=\"button\"\n              id={id}\n              onClick={onDeleteContact}\n            >\n              Delete</button>\n          </li>\n        );\n      })}\n    </ul>\n\n  );\n};\n\n\nContactList.defaultProps  = {\n  contacts: []\n}\n\nContactList.propTypes = {\n    contacts: propTypes.array,\n    onDeleteContact: propTypes.func.isRequired\n}\nexport default ContactList;","import React from 'react';\nimport propsTypes from 'prop-types'\nimport shortid from 'shortid';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n    const inputListId = shortid.generate();\n    return (\n       <>\n    <label className={styles.label} htmlFor={inputListId}>\n                Find contacts by name\n    </label>\n            <input className={styles.input}\n                id={inputListId}\n                value={value} onChange={onChange} />\n        </>    \n)};\n\nFilter.defaultProps = {\n    value: ' '\n}\nFilter.propsTypes = {\n    value: propsTypes.string,\n    onChange: propsTypes.isPequired\n}\nexport default Filter;","import { useEffect, useState } from 'react';\r\n \r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nimport './App.css';\r\nimport Title from './Components/Title';\r\nimport ContactForm from './Components/ContactForm';\r\nimport ContactList from './Components/ContactList';\r\nimport Filter from './Components/Filter';\r\n\r\n\r\nexport default function App() {\r\n  const [contacts, setContacts] = useState(()=>{\r\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? []\r\n  })\r\n\r\n  const [filter, setFilter] = useState('');\r\n\r\n useEffect(()=>{\r\n    window.localStorage.setItem('contacts',JSON.stringify(contacts))\r\n  },[contacts])\r\n\r\n\r\n  \r\n  const addContact = (name, number) => {\r\n    // if (handleCoincidence(name.toLowerCase())) {\r\n    //   return\r\n    // };\r\n\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    };\r\n    console.log(contact);\r\n    setContacts((prev) => { return [...prev, contact] });\r\n    \r\n  };\r\n  \r\n\r\n  \r\n  const deleteContact = e => {\r\n    const contactId = e.currentTarget.id;\r\n    setContacts(contacts.filter(contact => contact.id !== contactId));\r\n     setFilter('');\r\n  };\r\n  \r\n  const changeFilter = e => {\r\n    setFilter(e.currentTarget.value);\r\n\r\n  };\r\n\r\n  \r\n  const getVisibleContact = () =>  {\r\n    if (!contacts) return []\r\n\r\n    const normalizedFilter = filter.toLowerCase();\r\n   return  contacts.filter(({name})=> name.toLowerCase().includes(normalizedFilter))\r\n  };\r\n  \r\n  const  handleCoincidence = currentName => {\r\n    if (!contacts) {return }\r\n\r\n    if (contacts.find(({ name }) => name.toLowerCase() === currentName)) {\r\n      alert(`${currentName} is already in contacts`);\r\n      return true;\r\n    }\r\n  };\r\n  const visibleContacts = getVisibleContact();\r\n  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n     <Title>Phonebook</Title>\r\n      <ContactForm contacts={contacts} onSubmit={addContact} coincidence={handleCoincidence} />\r\n      <Filter value={filter} onChange={changeFilter} />\r\n      \r\n      {visibleContacts !== 0 ? (\r\n        <ContactList contacts={visibleContacts} onDeleteContact={deleteContact} />) : (\r\n        <h3>No contact</h3>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nApp.defaultProps = {\r\n  totalContactsCount: null,\r\n  visibleContactsCount: null\r\n}\r\nApp.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape(\r\n        {\r\n          id: PropTypes.any.isRequired,\r\n          name: PropTypes.string.isRequired,\r\n          number: PropTypes.number.isRequired,\r\n        })\r\n    ),\r\n    filter: PropTypes.string,\r\n    totalContactsCount: PropTypes.number,\r\n    visibleContacts: PropTypes.number,\r\n};\r\n  \r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1ENDc\",\"item\":\"ContactList_item__3ISpT\",\"name\":\"ContactList_name__1XLZf\",\"btn\":\"ContactList_btn__2wwfG\"};"],"sourceRoot":""}